import random

#generate key pairs

def generate_key_pair():
  p = generate_prime_num()
  q = generate_prime_num()
  n = p * q
  phi = (p - 1) * (q - 1)
  e = generate_exponent(phi)
  d = modular_inverse(e,phi)
  public_key = (e,n)
  private_key = (d,n)
  return public_key,private_key

def generate_prime_num():
  while True:
    num = random.randint(2**15,2**16)
    if is_prime(num):
      return num

def is_prime(num):
  if num <= 1:
    return False
  c = 2
  while c * c < num:
    if num % c == 0:
      return False
    c += 1
  return c * c > num

def generate_exponent(phi):
  e = 655
  while True:
    if gcd(e,phi) == 1:
      return e
    e += 2

def gcd(a,b):
  while b != 0:
    a,b = b, a % b
  return a

def modular_inverse(a,b):
  g,x,y = extended_gcd(a,b)
  if g != 1:
    raise ValueError("Modular_inverse doesn't exist")
  return x % b

def extended_gcd(a,b):
  if a == 0:
    return b,0,1
  g,x1,y1 = extended_gcd(b % a,a)
  x = y1 - (b // a) * x1
  y = x1
  return g,x,y

public_key,private_key = generate_key_pair()
print(f"Public_key: {public_key}")
print(f"Private_key : {private_key}")


